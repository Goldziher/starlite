CLI
===

Litestar provides a convenient command line interface (CLI) for running and managing Litestar applications. The CLI is
powered by `click <https://click.palletsprojects.com/>`_, `rich <https://rich.readthedocs.io>`_,
and `rich-click <https://github.com/ewels/rich-click>`_.

Enabling all CLI features
-------------------------

The CLI and its hard dependencies are included by default. However, if you want to run your application
(using ``litestar run`` ) or beautify the Typescript generated by the ``litestar schema typescript``
command, you'll need ``uvicorn`` and ``jsbeautifier`` . They can be installed independently, but we
recommend installing the ``standard`` group which conveniently bundles commonly used optional dependencies.

.. code-block:: shell

   pip install litestar[standard]

Once you have installed ``standard``, you'll have access to the ``litestar run`` command.

Autodiscovery
-------------

Litestar offers autodiscovery of applications and application factories placed within the canonical modules named
either ``app`` or ``application``. These modules can be individual files or directories. Within these modules or their
submodules, the CLI will detect any instances of :class:`Litestar <.app.Litestar>`, callables named ``create_app``, or
callables annotated to return a :class:`Litestar <.app.Litestar>` instance.

The autodiscovery follows these lookup locations in order:

1. ``app.py``
2. ``app/__init__.py``
3. Submodules of ``app``
4. ``application.py``
5. ``application/__init__.py``
6. Submodules of ``application``

Within these locations, Litestar CLI looks for:

1. An object named ``app`` that is an instance of :class:`Litestar <.app.Litestar>`
2. An object named ``application`` that is an instance of :class:`Litestar <.app.Litestar>`
3. Any object that is an instance of :class:`Litestar <.app.Litestar>`
4. A callable named ``create_app``
5. A callable annotated to return an instance of :class:`Litestar <.app.Litestar>`

Commands
--------

litestar
^^^^^^^^

The main entrypoint to the Litestar CLI is the ``litestar`` command.

If you don't pass the ``--app`` flag, the application will be automatically discovered, as explained in
`Autodiscovery`_.

Options
~~~~~~~

+---------------+---------------------------+-----------------------------------------------------------------+
| Flag          | Environment variable      | Description                                                     |
+===============+===========================+=================================================================+
| ``--app``     | ``LITESTAR_APP``          | ``<modulename>.<submodule>:<app instance>``                     |
+---------------+---------------------------+-----------------------------------------------------------------+
| ``--app-dir`` | N/A                       | Look for the app in the specified directory by adding it to the |
|               |                           | PYTHONPATH. Defaults to the current working directory.          |
+---------------+---------------------------+-----------------------------------------------------------------+

version
^^^^^^^

Prints the currently installed version of Litestar.

Options
~~~~~~~

+-------------------------+------------------------------------+
| Name                    | Description                        |
+=========================+====================================+
| ``-s``\ , ``--short``   | Include only ``MAJOR.MINOR.PATCH`` |
+-------------------------+------------------------------------+


run
^^^

The ``run`` command executes a Litestar application using `uvicorn <https://www.uvicorn.org/>`_.

.. literalinclude:: /examples/cli/run.sh
    :language: shell

.. caution::

    This feature is intended for development purposes only and should not be used to deploy production applications.

.. versionchanged:: 2.8.0
    CLI options take precedence over environment variables!

.. _cli-run-options:

Options
~~~~~~~

+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| Flag                                      | Environment variable                         | Description                                                                                |
+===========================================+==============================================+============================================================================================+
| ``-r``\ , ``--reload``                    | ``LITESTAR_RELOAD``                          | Reload the application when files in its directory are changed                             |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``-R``\ , ``--reload-dir``                | ``LITESTAR_RELOAD_DIRS``                     | Specify directories to watch for reload.                                                   |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``-I``\ , ``--reload-include``            | ``LITESTAR_RELOAD_INCLUDES``                 | Specify glob patterns for files to include when watching for reload.                       |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``-E``\ , ``--reload-exclude``            | ``LITESTAR_RELOAD_EXCLUDES``                 | Specify glob patterns for files to exclude when watching for reload.                       |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``-p``\ , ``--port``                      | ``LITESTAR_PORT``                            | Bind the server to this port [default: 8000]                                               |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``--wc``\ , ``--web-concurrency``         | ``LITESTAR_WEB_CONCURRENCY``                 | .. versionchanged:: 2.8                                                                    |
|                                           | ``WEB_CONCURRENCY``                          |    ``LITESTAR_WEB_CONCURRENCY`` is supported and takes precedence over ``WEB_CONCURRENCY`` |
|                                           |                                              |                                                                                            |
|                                           |                                              | The number of concurrent web workers to start [default: 1]                                 |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``-H``\ , ``--host``                      | ``LITESTAR_HOST``                            | Bind the server to this host [default: 127.0.0.1]                                          |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``--fd``\ , ``--file-descriptor``         | ``LITESTAR_FILE_DESCRIPTOR``                 | Bind to a socket from this file descriptor.                                                |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``--uds``\ , ``--unix-domain-socket``     | ``LITESTAR_UNIX_DOMAIN_SOCKET``              | Bind to a UNIX domain socket.                                                              |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``-d``\ , ``--debug``                     | ``LITESTAR_DEBUG``                           | Run the application in debug mode                                                          |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``--pdb``\ , ``--use_pdb``                | ``LITESTAR_PDB``                             | Drop into the Python debugger when an exception occurs                                     |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``--ssl-certfile``                        | ``LITESTAR_SSL_CERT_PATH``                   | Path to a SSL certificate file                                                             |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``--ssl-keyfile``                         | ``LITESTAR_SSL_KEY_PATH``                    | Path to the private key to the SSL certificate                                             |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+
| ``--create-self-signed-cert``             | ``LITESTAR_CREATE_SELF_SIGNED_CERT``         | If the SSL certificate and key are not found, generate a self-signed certificate           |
+-------------------------------------------+----------------------------------------------+--------------------------------------------------------------------------------------------+

--reload-dir
++++++++++++

The ``--reload-dir`` flag allows you to specify directories to watch for changes. If you specify this flag, the ``--reload`` flag is implied. You can specify multiple directories by passing the flag multiple times:

.. literalinclude:: /examples/cli/reload_dir.sh
    :language: shell


To set multiple directories via an environment variable, use a comma-separated list:

.. literalinclude:: /examples/cli/reload_dir_multiple_directories.sh
    :language: shell


--reload-include
++++++++++++++++

The ``--reload-include`` flag allows you to specify glob patterns to include when watching for file changes. If you specify this flag, the ``--reload`` flag is implied. Furthermore, ``.py`` files are included implicitly by default.

You can specify multiple glob patterns by passing the flag multiple times:

.. literalinclude:: /examples/cli/reload_include.sh
    :language: shell

To set multiple directories via an environment variable, use a comma-separated list:

.. literalinclude:: /examples/cli/reload_include_multiple_directories.sh
    :language: shell


--reload-exclude
++++++++++++++++

The ``--reload-exclude`` flag allows you to specify glob patterns to exclude when watching for file changes. If you specify this flag, the ``--reload`` flag is implied.

You can specify multiple glob patterns by passing the flag multiple times:

.. literalinclude:: /examples/cli/reload_exclude.sh
    :language: shell

To set multiple directories via an environment variable, use a comma-separated list:

.. literalinclude:: /examples/cli/reload_exclude_multiple_directories.sh
    :language: shell


SSL
+++

You can pass paths to an SSL certificate and it's private key to run the server using the HTTPS protocol:

.. literalinclude:: /examples/cli/ssl.sh
    :language: shell


Both flags must be provided and both files must exist. These are then passed to ``uvicorn``.
You can also use the  ``--create-self-signed-cert`` flag:

.. literalinclude:: /examples/cli/ssl_self_signed.sh
    :language: shell


This way, if the given files don't exist, a self-signed certificate and a passwordless key will be generated.
If the files are found, they will be reused.

info
^^^^

The ``info`` command displays useful information about the selected application and its configuration.

.. literalinclude:: /examples/cli/info.sh
    :language: shell


.. image:: /images/cli/litestar_info.png
   :alt: litestar info


routes
^^^^^^

The ``routes`` command displays a tree view of the routing table.

.. literalinclude:: /examples/cli/routes.sh
    :language: shell


Options
~~~~~~~

+-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
| Flag            | Description                                                                                                                                               |
+=================+===========================================================================================================================================================+
| ``--schema``    | Include default auto generated openAPI schema routes                                                                                                      |
+-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
| ``--exclude``   | Exclude endpoints from query with given regex patterns. Multiple excludes allowed. e.g., ``litestar routes  --schema --exclude=routes/.* --exclude=[]``   |
+-----------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+




.. image:: /images/cli/litestar_routes.png
   :alt: litestar info


sessions
^^^^^^^^

This command and its subcommands provide management utilities for server-side session backends.

delete
~~~~~~

The ``delete`` subcommand deletes a specific session from the backend.

.. literalinclude:: /examples/cli/sessions_delete.sh
    :language: shell


clear
~~~~~

The `clear` subcommand is used to remove all sessions from the backend.

.. literalinclude:: /examples/cli/sessions_clear.sh
    :language: shell


openapi
^^^^^^^

This command provides utilities to generate OpenAPI schemas and TypeScript types.

schema
~~~~~~

The `schema` subcommand generates OpenAPI specifications from the Litestar application and serializes them as either
JSON or YAML. The serialization format depends on the filename, which is by default `openapi_schema.json`. You can
specify a different filename using the `--output` flag. For example:

.. literalinclude:: /examples/cli/openapi_schema.sh
    :language: shell


typescript
~~~~~~~~~~

The `typescript` subcommand generates TypeScript definitions from the Litestar application's OpenAPI specifications.
For example:


.. literalinclude:: /examples/cli/typescript_schema.sh
    :language: shell


By default, this command outputs a file called `api-specs.ts`. You can change this using the `--output` option:


.. literalinclude:: /examples/cli/typescript_schema_path.sh
    :language: shell


You can also specify the top-level TypeScript namespace that will be created, which is `API` by default:

.. literalinclude:: /examples/cli/typescript_schema.ts
    :language: typescript


To do this, use the `--namespace` option:

.. literalinclude:: /examples/cli/typescript_schema_namespace.sh
    :language: shell


This will result in:

.. literalinclude:: /examples/cli/typescript_schema_namespace.ts
    :language: typescript


Extending the CLI
-----------------

Litestar's CLI is built with `click <https://click.palletsprojects.com/>`_ and can be
extended by making use of
`entry points <https://packaging.python.org/en/latest/specifications/entry-points/>`_,
or by creating a plugin that conforms to the
:class:`~litestar.plugins.CLIPluginProtocol`.

Using entry points
^^^^^^^^^^^^^^^^^^

Entry points for the CLI can be added under the ``litestar.commands`` group. These
entries should point to a :class:`click.Command` or :class:`click.Group`:

.. tab-set::

    .. tab-item:: setup.py

        .. literalinclude:: /examples/cli/entry_points.py
            :language: typescript


    .. tab-item:: pdm

        .. literalinclude:: /examples/cli/pdm.toml
            :caption: Using `PDM <https://pdm.fming.dev/>`_
            :language: toml


    .. tab-item:: Poetry

        .. literalinclude:: /examples/cli/poetry.toml
            :caption: Using `Poetry <https://python-poetry.org/>`_
            :language: toml


Using a plugin
^^^^^^^^^^^^^^

A plugin extending the CLI can be created using the
:class:`~litestar.plugins.CLIPluginProtocol`. Its
:meth:`~litestar.plugins.CLIPluginProtocol.on_cli_init` will be called during the
initialization of the CLI, and receive the root :class:`click.Group` as its first
argument, which can then be used to add or override commands:

.. literalinclude:: /examples/cli/plugin.py
    :language: python


Accessing the app instance
^^^^^^^^^^^^^^^^^^^^^^^^^^

When extending the Litestar CLI, you will most likely need access to the loaded ``Litestar`` instance.
You can achieve this by adding the special ``app`` parameter to your CLI functions. This will cause the
``Litestar`` instance to be injected into the function whenever it is called from a click-context.

.. literalinclude:: /examples/cli/app_instance.py
    :language: python


CLI Reference
-------------

For more information, visit the :doc:`Litestar CLI Click API Reference </reference/cli>`.
